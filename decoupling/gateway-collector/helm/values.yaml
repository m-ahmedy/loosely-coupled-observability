mode: deployment

image:
  repository: otel/opentelemetry-collector-contrib

fullnameOverride: telemetry-gateway

ports:
  otlp:
    enabled: true
  otlp-http:
    enabled: true
  jaeger-compact:
    enabled: false
  jaeger-thrift:
    enabled: false
  jaeger-grpc:
    enabled: false
  zipkin:
    enabled: false
  metrics:
    enabled: false
    
ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
    nginx.ingress.kubernetes.io/auth-tls-verify-client: "on"
    nginx.ingress.kubernetes.io/auth-tls-secret: "telemetry-gateway/telemetry-gateway-tls-secret"
  ingressClassName: nginx
  hosts:
    - host: telemetry-gateway.localhost
      paths:
        - path: /
          pathType: Prefix
          port: 4318
        - path: /
          pathType: Prefix
          port: 4317
  tls:
    - secretName: telemetry-gateway-tls-secret
      hosts:
        - telemetry-gateway.localhost


config:
  extensions:
    health_check:
      endpoint: 0.0.0.0:13133
      
  receivers:
    otlp:
      protocols:
        grpc:
          endpoint: 0.0.0.0:4317
          tls:
            cert_file: /certs/tls.crt
            key_file: /certs/tls.key
            ca_file: /certs/ca.crt
        http:
          endpoint: 0.0.0.0:4318
          tls:
            cert_file: /certs/tls.crt
            key_file: /certs/tls.key
            ca_file: /certs/ca.crt

  processors:
    memory_limiter:
      check_interval: 1s
      limit_mib: 400
      spike_limit_mib: 100
    batch:
      send_batch_max_size: 10000
      timeout: 0s

  exporters:
    kafka/traces:
      brokers: ["telemetry-kafka-bootstrap.kafka:9093"]
      topic: otel-traces
      encoding: otlp_json
      # protocol_version: "2.8.0"
      auth:
        sasl:
          mechanism: SCRAM-SHA-512
          username: traces-producer
          password: ${TRACES_PRODUCER_KAFKA_PASSWORD}
        tls:
          insecure_skip_verify: true

    kafka/metrics:
      brokers: ["telemetry-kafka-bootstrap.kafka:9093"]
      topic: prometheus-metrics
      encoding: otlp_json
      # protocol_version: "2.8.0"
      auth:
        sasl:
          mechanism: SCRAM-SHA-512
          username: metrics-producer
          password: ${METRICS_PRODUCER_KAFKA_PASSWORD}
        tls:
          insecure_skip_verify: true

    kafka/logs:
      brokers: ["telemetry-kafka-bootstrap.kafka:9093"]
      topic: logs
      encoding: otlp_json
      # protocol_version: "2.8.0"
      auth:
        sasl:
          mechanism: SCRAM-SHA-512
          username: logs-producer
          password: ${LOGS_PRODUCER_KAFKA_PASSWORD}
        tls:
          insecure_skip_verify: true

  service:
    extensions: [health_check]
    pipelines:
      traces:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [kafka/traces]

      metrics:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [kafka/metrics]

      logs:
        receivers: [otlp]
        processors: [memory_limiter, batch]
        exporters: [kafka/logs]

extraEnvs:
  - name: TRACES_PRODUCER_KAFKA_PASSWORD
    valueFrom:
      secretKeyRef:
        name: traces-producer
        key: password
  - name: METRICS_PRODUCER_KAFKA_PASSWORD
    valueFrom:
      secretKeyRef:
        name: metrics-producer
        key: password
  - name: LOGS_PRODUCER_KAFKA_PASSWORD
    valueFrom:
      secretKeyRef:
        name: logs-producer
        key: password

extraVolumes:
  - name: certs
    secret:
      secretName: telemetry-gateway-tls-secret

extraVolumeMounts:
  - name: certs
    mountPath: /certs
    readOnly: true

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 256Mi